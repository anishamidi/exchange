"""
Django settings for Exchange project.

Generated by 'django-admin startproject' using Django 4.1.1.
For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env from absolute path to avoid cwd issues
env_path = BASE_DIR / ".env"
if env_path.exists():
    load_dotenv(dotenv_path=env_path)

# === General settings ===
RUN_MODE = os.getenv("RUN_MODE", "local").lower()

# Secret Key
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    SECRET_KEY = get_random_secret_key()
    print("âš  WARNING: SECRET_KEY not found in .env, generated a random key for development.")

# Debug mode
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes")

# Allowed Hosts
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")

# === Installed Applications ===
INSTALLED_APPS = [
    "rest_framework",
    "dashboard.apps.DashboardConfig",
    "users.apps.UsersConfig",
    "wallet.apps.WalletConfig",
    "trading.apps.TradingConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_q",
]

Q_CLUSTER = {
    "name": "Exchange",
    "retry": 30,
    "timeout": 30,
    "orm": "default",  # Use Django's ORM + database for broker
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Exchange.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Exchange.wsgi.application"

# === Database Configuration ===
if RUN_MODE == "local":
    db_host = os.getenv("DATABASE_HOST_LOCAL", "127.0.0.1")
else:
    db_host = os.getenv("DATABASE_HOST_CLUSTER", "postgres")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("DATABASE_NAME"),
        'USER': os.getenv("DATABASE_USER"),
        'PASSWORD': os.getenv("DATABASE_PASSWORD"),
        'HOST': db_host,
        'PORT': os.getenv("DATABASE_PORT", "5432"),
    }
}

# === Password validation ===
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# === Internationalization ===
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Europe/Warsaw"
USE_I18N = True
USE_TZ = True

# === Static & Media ===
STATIC_URL = "static/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# === Default primary key field type ===
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# === Login / Redirects ===
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'profile'

# === Email backend for development ===
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

